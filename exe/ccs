#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'ccs'
require 'yaml'
require 'optparse'
require 'io/console'

options = {
  'access_token' => ENV['CCS_ACCESS_TOKEN'],
  'secret_token' => ENV['CCS_SECRET_TOKEN']
}

option_parser = OptionParser.new
option_parser.banner = 'Usage: ccs [OPTIONS] <(LocalPath|STDIN)|(CCSUri|Uri)> <(CCSUri|Uri)|(LocalPath|STDOUT)>'
option_parser.separator  ''
option_parser.separator  'Configuration Control System (CCS)'
option_parser.separator  ''
option_parser.separator  'Options:'

option_parser.on('-c CONFIGURATION', '--configuration CONFIGURATION', String, 'Path to configuration file') do |v|
  options['configuration'] = v
end

option_parser.on('-a CCS_ACCESS_TOKEN', '--access-token CCS_ACCESS_TOKEN', String, 'CCS Access Token') do |v|
  options['access_token'] = v
end

option_parser.on('-s CCS_SECRET_TOKEN', '--secret-token CCS_SECRET_TOKEN', String, 'CCS Secret Token') do |v|
  options['secret_token'] = v
end

option_parser.separator  ''
option_parser.separator  'Configure via environment variables'
option_parser.separator  '  CCS_ACCESS_TOKEN'
option_parser.separator  '  CCS_SECRET_TOKEN'

option_parser.separator  ''
option_parser.separator  'Examples:'
option_parser.separator  '  Download to STDOUT'
option_parser.separator  '    ccs ccs://workspace-name/0.1.0/path/to/file.yml -'
option_parser.separator  '    ccs http://host.tld:9292/workspace-name/0.1.0/path/to/file.yml -'
option_parser.separator  '    ccs https://host.tld/workspace-name/0.1.0/path/to/file.yml -'
option_parser.separator  '  Download to local file'
option_parser.separator  '    ccs ccs://workspace-name/0.1.0/path/to/file.yml /local/path/to/file.yml'
option_parser.separator  '  Upload local file'
option_parser.separator  '    ccs /local/path/to/file.yml ccs://workspace-name/0.1.0/path/to/file.yml'
option_parser.separator  '  Upload content from STDIN'
option_parser.separator  '    echo "{ a: 1 }" | ccs - ccs://workspace-name/0.1.0/path/to/file.yml'
option_parser.separator  '    cat /local/path/to/file.yml | ccs - ccs://workspace-name/0.1.0/path/to/file.yml'
option_parser.separator  ''

option_parser.separator  format('Version: %<version>s', version: Ccs::VERSION)

arguments = option_parser.parse!

unless options.values.any?
  puts option_parser
  exit(1)
end

options = YAML.safe_load File.read(options.delete('configuration')) if options.key?('configuration')

raise OptionParser::MissingArgument, 'access_token' unless options['access_token']
raise OptionParser::MissingArgument, 'secret_token' unless options['secret_token']
raise OptionParser::MissingArgument, 'source' unless arguments.fetch(0, nil)
raise OptionParser::MissingArgument, 'destination' unless arguments.fetch(1, nil)

exit(1) unless Ccs::Application.new(arguments[0], arguments[1], options['access_token'], options['secret_token']).run
